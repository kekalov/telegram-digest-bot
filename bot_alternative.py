import os
import logging
import json
import schedule
import time
import asyncio
import requests
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))
DIGEST_TIME = os.getenv('DIGEST_TIME', '19:00')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
class MessageStore:
    def __init__(self):
        self.messages = defaultdict(list)  # channel_id -> messages
        self.channels = {}  # channel_id -> channel_info
        self.monitored_channels = set()  # –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.user_states = {}  # —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    def add_message(self, channel_id: str, message_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        self.messages[channel_id].append(message_data)
    
    def get_messages_for_period(self, hours: int = 24) -> Dict[str, List[dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        filtered_messages = {}
        
        for channel_id, messages in self.messages.items():
            if channel_id in self.monitored_channels:
                recent_messages = [
                    msg for msg in messages 
                    if datetime.fromisoformat(msg['timestamp']) > cutoff_time
                ]
                if recent_messages:
                    filtered_messages[channel_id] = recent_messages
        
        return filtered_messages
    
    def add_channel(self, channel_id: str, channel_info: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.channels[channel_id] = channel_info
        self.monitored_channels.add(channel_id)
    
    def remove_channel(self, channel_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitored_channels.discard(channel_id)
    
    def get_monitored_channels(self) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        return [self.channels.get(ch_id, {'id': ch_id, 'title': 'Unknown'}) 
                for ch_id in self.monitored_channels]
    
    def get_all_channels(self) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        return list(self.channels.values())
    
    def set_user_state(self, user_id: int, state: str, data: dict = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_states[user_id] = {'state': state, 'data': data or {}}
    
    def get_user_state(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, {'state': 'idle', 'data': {}})

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
message_store = MessageStore()

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
PREDEFINED_CHANNELS = {
    'meduza': {
        'id': 'meduza',
        'title': 'Meduza',
        'username': 'meduzaproject',
        'type': 'channel'
    },
    'rbc': {
        'id': 'rbc',
        'title': '–†–ë–ö',
        'username': 'rbc_news',
        'type': 'channel'
    },
    'tass': {
        'id': 'tass',
        'title': '–¢–ê–°–°',
        'username': 'tass_agency',
        'type': 'channel'
    },
    'interfax': {
        'id': 'interfax',
        'title': '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å',
        'username': 'interfax_news',
        'type': 'channel'
    },
    'ria': {
        'id': 'ria',
        'title': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
        'username': 'rian_ru',
        'type': 'channel'
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    welcome_text = """
ü§ñ **Telegram Digest Bot (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/digest` - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
‚Ä¢ `/manage_channels` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ `/add_channel @username` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ username
‚Ä¢ `/list_channels` - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/manage_channels` –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π `/add_channel @username`
3. –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –≤ 19:00 –≤–µ—á–µ—Ä–∞
    """
    
    try:
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /start: {e}")
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/digest` - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
‚Ä¢ `/manage_channels` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ `/add_channel @username` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ username
‚Ä¢ `/list_channels` - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/manage_channels` –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª: `/add_channel @channel_username`
3. –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

**–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏:**
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00 –≤–µ—á–µ—Ä–∞
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def manage_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_channels - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    for channel_id, channel_info in PREDEFINED_CHANNELS.items():
        message_store.channels[channel_id] = channel_info
    
    all_channels = message_store.get_all_channels()
    monitored_channels = message_store.get_monitored_channels()
    monitored_ids = {channel['id'] for channel in monitored_channels}
    
    if not all_channels:
        await update.message.reply_text(
            "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_channel @username` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤!"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    keyboard = []
    for channel in all_channels:
        channel_id = channel['id']
        channel_title = channel['title']
        is_monitored = channel_id in monitored_ids
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "‚úÖ" if is_monitored else "‚ùå"
        button_text = f"{status_emoji} {channel_title}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"toggle_channel:{channel_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_channels"),
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_channels"),
        InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å –≤—Å–µ", callback_data="deselect_all_channels")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status_text = f"üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**\n\n"
    status_text += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(monitored_channels)} –∏–∑ {len(all_channels)} –∫–∞–Ω–∞–ª–æ–≤\n\n"
    status_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∞–Ω–∞–ª–∏–∑:"
    
    await update.message.reply_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª: `/add_channel @channel_name`", parse_mode='Markdown')
        return
    
    channel_username = context.args[0].lstrip('@')
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel_info = {
        'id': channel_username,
        'title': f"@{channel_username}",
        'username': channel_username,
        'type': 'channel'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    message_store.channels[channel_username] = channel_info
    
    await update.message.reply_text(
        f"‚úÖ –ö–∞–Ω–∞–ª **@{channel_username}** –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/manage_channels` –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –µ–≥–æ –≤ –∞–Ω–∞–ª–∏–∑.",
        parse_mode='Markdown'
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    if data.startswith("toggle_channel:"):
        channel_id = data.split(":")[1]
        channel_info = message_store.channels.get(channel_id)
        
        if not channel_info:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
        if channel_id in message_store.monitored_channels:
            message_store.remove_channel(channel_id)
            status = "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω"
        else:
            message_store.add_channel(channel_id, channel_info)
            status = "‚úÖ –≤–∫–ª—é—á–µ–Ω"
        
        await query.edit_message_text(f"–ö–∞–Ω–∞–ª **{channel_info['title']}** {status} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await manage_channels(update, context)
    
    elif data == "refresh_channels":
        await manage_channels(update, context)
    
    elif data == "select_all_channels":
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        for channel_id, channel_info in message_store.channels.items():
            message_store.add_channel(channel_id, channel_info)
        
        await query.edit_message_text("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        await manage_channels(update, context)
    
    elif data == "deselect_all_channels":
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        message_store.monitored_channels.clear()
        
        await query.edit_message_text("‚ùå –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –∞–Ω–∞–ª–∏–∑–∞")
        await manage_channels(update, context)

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_channels"""
    channels = message_store.get_monitored_channels()
    
    if not channels:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    response_text = "üìã **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
    for i, channel in enumerate(channels, 1):
        username = f"@{channel.get('username', 'private')}" if channel.get('username') else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
        response_text += f"{i}. **{channel['title']}** ({username})\n"
    
    await update.message.reply_text(response_text, parse_mode='Markdown')

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...")
    
    try:
        digest_text = await create_digest()
        if digest_text:
            await update.message.reply_text(digest_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")

async def create_digest() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é OpenAI"""
    messages = message_store.get_messages_for_period(24)
    
    if not messages:
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    digest_data = []
    for chat_id, chat_messages in messages.items():
        channel_info = message_store.channels.get(chat_id, {})
        channel_title = channel_info.get('title', 'Unknown Channel')
        
        for msg in chat_messages:
            digest_data.append({
                'channel': channel_title,
                'text': msg['text'],
                'timestamp': msg['timestamp'],
                'author': msg['from_user']
            })
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.

–°–æ–æ–±—â–µ–Ω–∏—è:
{json.dumps(digest_data, ensure_ascii=False, indent=2)}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø–æ —Ç–µ–º–∞–º
2. –í—ã–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è
3. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞–Ω–∞–ª—ã)
4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
5. –û–±—â–∏–π –æ–±—ä–µ–º –Ω–µ –±–æ–ª–µ–µ 1000 —Å–ª–æ–≤
6. –§–æ—Ä–º–∞—Ç Markdown

–°–æ–∑–¥–∞–π —Å–≤–æ–¥–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å–≤–æ–¥–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤. –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ AI"

async def send_daily_digest(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
    if not ADMIN_USER_ID:
        logger.warning("ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏")
        return
    
    try:
        digest_text = await create_digest()
        if digest_text:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=digest_text,
                parse_mode='Markdown'
            )
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text="üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("manage_channels", manage_channels))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("list_channels", list_channels))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏
    schedule.every().day.at(DIGEST_TIME).do(
        lambda: asyncio.create_task(send_daily_digest(application))
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    import threading
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
