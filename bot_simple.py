#!/usr/bin/env python3
"""
Telegram Digest Bot - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import os
import re
import time
import logging
import requests
from datetime import datetime
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
PREDEFINED_CHANNELS = {
    'bbbreaking': {
        'id': 'bbbreaking',
        'title': 'BB Breaking',
        'username': 'bbbreaking',
        'type': 'channel',
        'web_url': 'https://t.me/bbbreaking'
    },
    'kontext_channel': {
        'id': 'kontext_channel',
        'title': '–ö–æ–Ω—Ç–µ–∫—Å—Ç',
        'username': 'kontext_channel',
        'type': 'channel',
        'web_url': 'https://t.me/kontext_channel'
    },
    'meduzalive': {
        'id': 'meduzalive',
        'title': 'Meduza Live',
        'username': 'meduzalive',
        'type': 'channel',
        'web_url': 'https://t.me/meduzalive'
    },
    'superslowflow': {
        'id': 'superslowflow',
        'title': 'Super Slow Flow',
        'username': 'superslowflow',
        'type': 'channel',
        'web_url': 'https://t.me/superslowflow'
    }
}

class MessageStore:
    def __init__(self):
        self.messages = defaultdict(list)
        self.channels = {}
        self.monitored_channels = set()
    
    def add_channel(self, channel_id: str, channel_info: dict):
        self.channels[channel_id] = channel_info
        self.monitored_channels.add(channel_id)
    
    def remove_channel(self, channel_id: str):
        if channel_id in self.monitored_channels:
            self.monitored_channels.remove(channel_id)
    
    def get_monitored_channels(self):
        return [self.channels.get(channel_id, {}) for channel_id in self.monitored_channels]
    
    def get_all_channels(self):
        return list(self.channels.values())

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
message_store = MessageStore()

def scrape_channel_messages(channel_username: str) -> list:
    """–°–∫—Ä–∞–ø–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        url = f"https://t.me/s/{channel_username}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        html_content = response.text
        messages = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        patterns = [
            r'<div class="tgme_widget_message_text js-message_text" dir="auto">(.*?)</div>',
            r'<div class="tgme_widget_message_text" dir="auto">(.*?)</div>',
            r'<div class="js-message_text" dir="auto">(.*?)</div>'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, html_content, re.DOTALL)
            for match in matches:
                # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏
                clean_text = re.sub(r'<[^>]+>', '', match)
                clean_text = clean_text.strip()
                
                if clean_text and len(clean_text) > 10:
                    messages.append({
                        'text': clean_text,
                        'from_user': 'Channel',
                        'timestamp': datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
                    })
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ
        if not messages:
            messages.append({
                'text': f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username}',
                'from_user': 'Channel',
                'timestamp': datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
            })
        
        return messages[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
        return [{
            'text': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_username}',
            'from_user': 'Error',
            'timestamp': datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
        }]

async def collect_real_messages():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
    monitored_channels = message_store.get_monitored_channels()
    
    for channel in monitored_channels:
        channel_id = channel['id']
        username = channel.get('username', channel_id)
        
        logger.info(f"–°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}")
        messages = scrape_channel_messages(username)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        message_store.messages[channel_id] = messages
        logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ Telegram Digest Bot

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /digest - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
‚Ä¢ /manage_channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ /add_channel @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ username
‚Ä¢ /collect_messages - —Å–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π /add_channel @username
3. –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /collect_messages –¥–ª—è —Å–±–æ—Ä–∞ —Å–≤–µ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
5. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–¥–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /digest

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram.
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É", callback_data="digest")],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton("üì• –°–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="collect_messages")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels")],
        [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "digest":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...")
        try:
            digest_text = await create_digest()
            if digest_text:
                await query.edit_message_text(digest_text)
            else:
                await query.edit_message_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}")
    
    elif data == "manage_channels":
        await manage_channels(update, context)
    
    elif data == "collect_messages":
        await query.edit_message_text("üîÑ –°–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
        try:
            await collect_real_messages()
            monitored_channels = message_store.get_monitored_channels()
            total_messages = sum(len(message_store.messages.get(channel['id'], [])) for channel in monitored_channels)
            
            response = f"‚úÖ –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            response += f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(monitored_channels)}\n"
            response += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
            
            if monitored_channels:
                response += f"üìä –ü–æ –∫–∞–Ω–∞–ª–∞–º:\n"
                for channel in monitored_channels:
                    message_count = len(message_store.messages.get(channel['id'], []))
                    response += f"‚Ä¢ {channel['title']}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            await query.edit_message_text(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
    
    elif data == "list_channels":
        channels = message_store.get_monitored_channels()
        if not channels:
            await query.edit_message_text("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            return
        
        response_text = "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n"
        for i, channel in enumerate(channels, 1):
            message_count = len(message_store.messages.get(channel['id'], []))
            response_text += f"{i}. {channel['title']} - {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        await query.edit_message_text(response_text)
    
    elif data == "help":
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /digest - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
‚Ä¢ /manage_channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ /add_channel @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ username
‚Ä¢ /collect_messages - —Å–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª: /add_channel @channel_username
3. –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /collect_messages –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
5. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–¥–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /digest
        """
        await query.edit_message_text(help_text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    elif data.startswith("toggle_channel:"):
        channel_id = data.split(":")[1]
        channel_info = message_store.channels.get(channel_id)
        
        if not channel_info:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if channel_id in message_store.monitored_channels:
            message_store.remove_channel(channel_id)
            status = "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω"
        else:
            message_store.add_channel(channel_id, channel_info)
            status = "‚úÖ –≤–∫–ª—é—á–µ–Ω"
        
        await query.edit_message_text(f"–ö–∞–Ω–∞–ª {channel_info['title']} {status} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        await manage_channels(update, context)

async def manage_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    for channel_id, channel_info in PREDEFINED_CHANNELS.items():
        message_store.channels[channel_id] = channel_info
    
    all_channels = message_store.get_all_channels()
    monitored_channels = message_store.get_monitored_channels()
    monitored_ids = {channel['id'] for channel in monitored_channels}
    
    if not all_channels:
        await update.callback_query.edit_message_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    keyboard = []
    for channel in all_channels:
        channel_id = channel['id']
        channel_title = channel['title']
        is_monitored = channel_id in monitored_ids
        
        status_emoji = "‚úÖ" if is_monitored else "‚ùå"
        button_text = f"{status_emoji} {channel_title}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"toggle_channel:{channel_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status_text = f"üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
    status_text += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(monitored_channels)} –∏–∑ {len(all_channels)} –∫–∞–Ω–∞–ª–æ–≤\n\n"
    status_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∞–Ω–∞–ª–∏–∑:"
    
    await update.callback_query.edit_message_text(status_text, reply_markup=reply_markup)

async def create_digest() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
    all_messages = []
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    for channel_id, messages in message_store.messages.items():
        channel_info = message_store.channels.get(channel_id, {})
        channel_title = channel_info.get('title', f'Channel {channel_id}')
        
        for msg in messages:
            all_messages.append({
                'channel': channel_title,
                'text': msg.get('text', ''),
                'author': msg.get('from_user', 'Unknown')
            })
    
    if not all_messages:
        return "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /collect_messages"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    digest_text = "üåç –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –í –ú–ò–†–ï\n"
    digest_text += f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    all_texts = []
    for msg in all_messages:
        text = msg['text'].strip()
        if text and len(text) > 10:
            all_texts.append(text)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    digest_text += "üî• –¢–û–ü-10 –ì–õ–ê–í–ù–´–• –ù–û–í–û–°–¢–ï–ô:\n\n"
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    unique_texts = []
    seen_texts = set()
    
    for text in all_texts:
        clean_text = text[:100].lower()
        if clean_text not in seen_texts:
            seen_texts.add(clean_text)
            unique_texts.append(text)
            if len(unique_texts) >= 10:
                break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
    for i, text in enumerate(unique_texts, 1):
        short_text = text[:150] + "..." if len(text) > 150 else text
        short_text = ' '.join(short_text.split())
        
        prefixes = ["üí•", "üì∞", "üî•", "‚ö°", "üéØ", "üí°", "üö®", "üì¢", "üé™", "üåü"]
        prefix = prefixes[i-1] if i <= len(prefixes) else "üìå"
        
        digest_text += f"{prefix} {short_text}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_channels = len(set(msg['channel'] for msg in all_messages))
    total_messages = len(all_messages)
    
    digest_text += f"---\n"
    digest_text += f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {total_channels} –∫–∞–Ω–∞–ª–æ–≤\n"
    digest_text += f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    digest_text += f"‚è∞ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%H:%M')}\n"
    
    return digest_text

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...")
    
    try:
        digest_text = await create_digest()
        if digest_text:
            await update.message.reply_text(digest_text)
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}")

async def collect_messages_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /collect_messages"""
    await update.message.reply_text("üîÑ –°–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
    
    try:
        await collect_real_messages()
        
        total_messages = sum(len(messages) for messages in message_store.messages.values())
        monitored_channels = message_store.get_monitored_channels()
        
        result_text = f"‚úÖ –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        result_text += f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(monitored_channels)}\n"
        result_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
        
        if monitored_channels:
            result_text += "üìä –ü–æ –∫–∞–Ω–∞–ª–∞–º:\n"
            for channel in monitored_channels:
                channel_id = channel['id']
                message_count = len(message_store.messages.get(channel_id, []))
                result_text += f"‚Ä¢ {channel['title']}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        else:
            result_text += "‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            result_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤\n"
        
        await update.message.reply_text(result_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª: /add_channel @channel_name")
        return
    
    channel_username = context.args[0].lstrip('@')
    
    channel_info = {
        'id': channel_username,
        'title': f"@{channel_username}",
        'username': channel_username,
        'type': 'channel',
        'web_url': f"https://t.me/{channel_username}"
    }
    
    message_store.channels[channel_username] = channel_info
    
    await update.message.reply_text(
        f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –µ–≥–æ –≤ –∞–Ω–∞–ª–∏–∑."
    )

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_channels"""
    channels = message_store.get_monitored_channels()
    
    if not channels:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    response_text = "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n"
    for i, channel in enumerate(channels, 1):
        message_count = len(message_store.messages.get(channel['id'], []))
        response_text += f"{i}. {channel['title']} - {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(response_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    monitored_channels = message_store.get_monitored_channels()
    total_messages = sum(len(messages) for messages in message_store.messages.values())
    
    status_text = f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
    status_text += f"üìã –ö–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {len(monitored_channels)}\n"
    status_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
    
    if monitored_channels:
        status_text += f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
        for i, channel in enumerate(monitored_channels, 1):
            message_count = len(message_store.messages.get(channel['id'], []))
            status_text += f"{i}. {channel['title']} ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
    else:
        status_text += f"‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        status_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤\n"
    
    await update.message.reply_text(status_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /digest - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–µ–π—á–∞—Å
‚Ä¢ /manage_channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ /add_channel @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ username
‚Ä¢ /collect_messages - —Å–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª: /add_channel @channel_username
3. –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /collect_messages –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
5. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–¥–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /digest
    """
    
    await update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("manage_channels", manage_channels))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("collect_messages", collect_messages_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("list_channels", list_channels))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        application.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
        application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()

